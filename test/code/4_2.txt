from flask import request, abort, current_app, session

from flask.ext.babel import lazy_gettext as _
from flask.ext.security import current_user

from wimoto.core import http
from wimoto.core.utils import (jsonify_status_code, round_decimal,
                                  null_fields_filter, trafaret_translate)
from wimoto.core.decorators import api_resource
from wimoto.product.api import CartResource
from wimoto.account.models import Address, Customer
from wimoto.account.api import CustomerResource
from wimoto.product.datastore import CartDatastore
from wimoto.product.models import Cart, Order
from wimoto.core.mixins import DiscountMixin

from wimoto.utils.api import (BaseAddressSetResource,
                              BasePaymentMethodResource)

from . import checkout
from .models import PaymentMethod

from ..delivery.documents import DeliveryRegion, DeliveryProvider

import trafaret as t

from decimal import Decimal
from operator import itemgetter


__all__ = ['CustomCartResource', 'CheckoutCustomerResource',
           'CustomCartTotalsResource']


@api_resource(checkout, 'carts', {'id': int})
class CustomCartResource(CartResource):

    def __sum(self, key, objects):
        return round_decimal(Decimal(sum(map(itemgetter(key), objects))))

    def get_objects(self, **kwargs):
        """ Method for extraction object list query
        """
        kwargs['is_ordered'] = False

        return super(CustomCartResource, self).get_objects(**kwargs)

    def gen_list_response(self, **kwargs):
        response = super(CustomCartResource, self).gen_list_response(**kwargs)
        var_price = self.__sum('price', response['objects'])
        var_cart_items = int(self.__sum('amount', response['objects']))
        var_price_net = self.__sum('net_price', response['objects'])
        var_vat = self.__sum('vat_price', response['objects'])

        response['meta'].update({
            'var': var_cart_items,
            'var_price_gross': var_price,
            'var_price_net': var_price_net,
            'var_vat': var_vat
        })

        return response

    @classmethod
    def serialize(cls, instance, include=None):
        """ Method to controls model serialization in derived classes
        :rtype : dict
        """
        data = instance.as_dict(api_fields=include)
        product = instance.product
        vat = product.get_vat()
        data.update({
            'net_price': round_decimal((Decimal(product.get_price()) * instance.amount) \
                                - vat.calculate(product.price, instance.amount)),
            'vat_percent': vat.percent,
            'vat_price': vat.calculate(product.price, instance.amount),
        })
        return data

