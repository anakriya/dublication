import os
import subprocess

from wimoto.product.api import OrderResource
from wimoto.product.models import Category
from wimoto.core import core, http
from flask import current_app
from flask.ext.security import current_user
from wimoto.shop.api import ShopIdResource
from wimoto.crm.api import CrmOrderResource
from wimoto.utils.price import price_format
from wimoto.utils.shop import render_template
from wimoto.utils.categories import get_categories

__all__ = ['invoice_pdf', 'customer_order']


@current_app.template_filter()
def price(s):
    return price_format(s)


@core.route('/order_invoice/<id>/')
def invoice_pdf(id):

    pdf_name = 'invoice_pdf_%s.pdf'%(id)
    pdf_path = os.path.join(current_app.config['PDF_INVOICE_DESTINATION'],
                            pdf_name)

    html_name = 'invoice_html_%s.html'%(id)
    html_path = os.path.join(current_app.config['HTML_INVOICE_DESTINATION'],
                             html_name)

    path = os.path.dirname(pdf_path)
    os.path.exists(path) or os.makedirs(path)

    path = os.path.dirname(html_path)
    os.path.exists(path) or os.makedirs(path)


    if current_user.is_superuser():
        order = CrmOrderResource()
    else:
        order = OrderResource()

    order_data = order.get_object(id=id)
    order_dict = order.serialize(order_data)

    shop_id = current_app.config["SHOP_ID"]
    shop = ShopIdResource()

    shop_data = shop.get_object(id=shop_id)
    shop_dict = ShopIdResource().serialize(shop_data)

    data = dict()
    data.update(shop_dict)
    data.update(order_dict)

    data["created_at"] = data["created_at"].strftime("%d.%m.%Y")


    with open(html_path, 'w') as fp:
        invoice_data = render_template('shop/pdf/pdf.html', **data)
        fp.write(invoice_data.encode('utf-8'))

    args = '{} -q "{}" "{}"'.format(current_app.config['PDF_CONVERTER'],
                                    html_path, pdf_path)
    try:
        p = subprocess.Popen(args, shell=True, stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE, close_fds=True)
        stdout, stderr = p.communicate()
        retcode = p.returncode

        if retcode < 0:
            raise Exception("terminated by signal: ", -retcode)

    except Exception as err:
        current_app.logger.error(err.message)

    with open(pdf_path) as fp:
        data = fp.read()

    response = current_app.response_class(data, status=http.OK, mimetype='application/pdf')

    os.unlink(html_path)
    os.unlink(pdf_path)

    return response


@core.route('/order/<id>')
def customer_order(id):
    categories = get_categories()

    return render_template('shop/base.html', **{
        'categories_dict': categories[0],
    })

